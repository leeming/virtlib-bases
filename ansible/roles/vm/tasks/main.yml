---
# Make sure pre-req stuff setup
- name: start virtualization services
  service:
    name: '{{ item }}'
    state: started
    enabled: yes
  loop:
    - libvirtd
    - libvirt-guests



# Stat VM directory, use this for when for other tasks
## TODO: Check if VM already exists, stat and register
- name: Check if exists
  stat:
    path: '{{ base_vm_dir }}/{{ vm_name }}'
  register: vm_exists

# Create VM directory
- name: create directory for virtual machine image
  file:
    dest: '{{ base_vm_dir }}/{{ vm_name }}'
    state: directory
    mode: '0755'


# Create Data bind directory
- name: Setup data dir
  file:
    dest: '{{ base_vm_dir }}/{{ vm_name }}/data'
    state: directory
    mode: '0755'
    owner: libvirt-qemu
    group: kvm


# Download cloud image OR use local image
# - name: download initial image for virtual machine
#   get_url:
#     url: '{{ virtual_machine_image_url }}'
#     dest: '/vms/{{ virtual_machine_image }}'
#     owner: libvirt-qemu
#     mode: '0600'
#     checksum: '{{ virtual_machine_image_checksum }}'
#   register: get_url
#   until: get_url is not failed
#   retries: 10
#   delay: 2
#  when: not virtual_machine_file.stat.exists

- name: grow initial image for virtual machine
  command: >
    qemu-img create -b {{ virtual_machine_source }} -f qcow2 -F qcow2 {{ base_vm_dir }}/{{ vm_name }}/os.qcow2 10G
  when: not vm_exists.stat.exists

# Resize / prep for install
- name: grow initial image for virtual machine
  command: >
    qemu-img resize "{{ base_vm_dir }}/{{ vm_name }}/os.qcow2" 10G
  when: not vm_exists.stat.exists

- name: check list of virtual machine definitions
  virt:
    command: list_vms
  register: virtual_machine_definitions

- name: create virtual machine
  virt:
    command: define
    xml: '{{ lookup("template", "templates/domain.xml.j2") }}'
  when: vm_name not in virtual_machine_definitions.list_vms

- name: configure virtual machine autostart
  virt:
    name: '{{ vm_name }}'
    state: running
    autostart: yes

- name: Get IP
  shell: >
    virsh net-dhcp-leases default {{ virtual_machine_macaddress }} | tail -2 | head -1 | awk '{split($5,ip,"/"); print ip[1]}'
  register: virtip

- debug: msg="{{ virtip.stdout }}"